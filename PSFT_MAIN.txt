#!/bin/bash
# ***********************************
# Created by Ninad Adhav            *
# Email ninad.adhav@oracle.com      *
# ***********************************

LogMsg(){
        local log=$1
        local msg=$2
        local pid=$$
        local now=$(date +'%s')
        local stamp=$(date --date "@${now}" +'%Y/%m/%d %H:%M:%S')
        echo "${stamp}-${pid}-${msg}" >>$log
}

CreateLog(){
        file=$1
        [ ! -e ${file} ] && touch $file
        sudo chmod a+rw $file
        sudo chown opc:opc $file
}


input_csv(){
echo Enter the path to the Input CSV File...
read -p 'Input Path to the file and press Enter : ' inputpath
if [[ -f $inputpath ]]
   then
       LogMsg $LOGFILE " $inputpath File found...proceeding to Tar Process"
   else
       echo
       echo $'\e[1;31m'CSV File does not exist at $inputpath ....Exiting !!!$'\e[0m'
       LogMsg $LOGFILE "CSV File does not exist at $inputpath ....Exiting !!!"
       echo
       exit 1
fi
sed -n '2,$p' <$inputpath > parsed_file.csv
LogMsg $LOGFILE "Installing Dos2unix Package for File conversion"
in=$(sudo yum install -q -y dos2unix && dos2unix -q parsed_file.csv)
LogMsg $LOGFILE "$in"
echo
}

soarvm_directory(){
if [[ -d $mpoint2 ]];
  then
     LogMsg $LOGFILE "Directory $mpoint2 found on SOAR VM...proceeding"
  else
     echo $'\e[1;31m'"****************************************************************"'\e[0m'
     echo $'\e[1;31m'"* SOURCE NAS DIRECTORY DOES NOT EXIST ON SOAR VM...EXITING !!  *"'\e[0m'
     echo $'\e[1;31m'"****************************************************************"'\e[0m'
     LogMsg $LOGFILE "NAS DIRECTORY $mpoint2 DOES NOT EXIST on SOAR VM...EXITING !!"
     exit 1
fi
}

source_connectivity(){
echo $'\e[1;36m'"Checking Source Servers Connectivity..."$'\e[0m'
echo
echo
for f in $(cat parsed_file.csv | cut -d"," -f2);
  do
    status=$(ssh -q -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=5 -i /home/opc/keys/ocs_key opc@$f echo ok 2>&1)
    if [[ $status == ok ]] ; then
          echo $'\e[1;34m'Connectivity Established to $f !!$'\e[0m'
          echo
          echo $'\e[1;36m'"Checking if $mpoint2 is present on $f"$'\e[0m'
          ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@$f "
          if [[ -d $mpoint2 ]]; then
              echo $'\e[1;32m'Directory is Present at $f$...Proceeding'\e[0m'
          else
              echo $'\e[1;31m'Directory $mpoint2 DOES NOT EXIST on Server $f Please Check and re-run the code!!!$'\e[0m'
          fi" 1>source_servers.log

          source_out=`cat /home/opc/source_servers.log`
          if [[ "${source_out}" == *"DOES NOT EXIST"* ]]; then
              echo $'\e[1;31m'"*********************************************************************************************************"$'\e[0m'
              echo $'\e[1;31m'"ERROR FOUND ------------> Directory $mpoint2 DOES NOT EXIST on Source Server $f"$'\e[0m'
              echo $'\e[1;31m'"*********************************************************************************************************"$'\e[0m'
              echo
          else
              echo $'\e[1;32m'"Directory $mpoint2 present..Proceeding"$'\e[0m'
              echo
          fi

    elif [[ $status == "Permission denied"* ]] ; then
       echo $'\e[1;36m'"Establishing Connection to $f"$'\e[0m'
       echo $'\e[1;31m'"*************************************************************************************************************************"$'\e[0m'
       echo $'\e[1;31m'ERROR --------> Permission Denied...Please check the ssh configuration of the Source Server $f$'\e[0m'
       echo
       echo $'\e[1;31m'"Cannot determine if $mpoint2 is present on Source $f. Fix connectivity issue and run again "$'\e[0m'
       echo $'\e[1;31m'"*************************************************************************************************************************"$'\e[0m'
    else
       echo $'\e[1;36m'"Establishing Connection to $f"$'\e[0m'
       echo $'\e[1;31m'"*********************************************************************************************************************************************"$'\e[0m'
       echo $'\e[1;31m'ERROR --------> Incorrect Authentication..Please check the IP Address and Key provided in the path to the Source Server $f.$'\e[0m'
       echo
       echo $'\e[1;31m'"Cannot determine if $mpoint2 is present on Source $f . Fix connectivity issue and run again "$'\e[0m'
       echo $'\e[1;31m'"*********************************************************************************************************************************************"$'\e[0m'
    fi >>final.log
    sleep 1
   done
   cat final.log
   final=`cat /home/opc/final.log`
   if [[ "${final}" == *"DOES NOT EXIST"* ]]; then
              echo $'\e[1;31m'____________________________________________________________________________________________$'\e[0m'
              echo
              echo $'\e[1;31m'"One or more Errors have been found and highlighted above...Please fix and rerun...EXITING"$'\e[0m'
              echo $'\e[1;31m'____________________________________________________________________________________________$'\e[0m'
              echo
              LogMsg $LOGFILE "`cat final.log`"
              LogMsg $LOGFILE "One or more Errors have been found and highlighted above...Please fix and rerun...EXITING"
              exit 1
   else
              echo $'\e[1;32m'_________________________________________________________$'\e[0m'
              echo
              echo $'\e[1;32m'"No Errors found with Source Connectivity...Proceeding"$'\e[0m'
              echo $'\e[1;32m'_________________________________________________________$'\e[0m'
              LogMsg $LOGFILE "`cat final.log`"
              LogMsg $LOGFILE "No Errors found with Source Connectivity...Proceeding"
   fi

}

target_connectivity(){
echo $'\e[1;36m'"Checking Target Server Connectivity..."$'\e[0m'
echo
sleep 2
for g in $(cat parsed_file.csv | cut -d"," -f1);
  do
    status1=$(ssh -q -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=5 -i /home/opc/keys/ocs_key opc@$g echo ok 2>&1)
    if [[ $status1 == ok ]] ; then
          echo $'\e[1;34m'Connectivity Established to $g !!$'\e[0m'
          echo $'\e[1;36m'"Checking if $mountpoint2 is present on $g"$'\e[0m'
          echo
          ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@$g "
          if [[ -d $mountpoint2 ]]; then
              echo $'\e[1;32m'Directory is Present at $g$'\e[0m'
          else
              echo $'\e[1;31m'Directory $mountpoint2 DOES NOT EXIST on Server $g Please Check and re-run the code!!!$'\e[0m'
          fi" 1>target_servers.log

          target_out=`cat /home/opc/target_servers.log`
          if [[ "${target_out}" == *"DOES NOT EXIST"* ]]; then
              echo $'\e[1;31m'"*********************************************************************************************************"$'\e[0m'
              echo $'\e[1;31m'"ERROR FOUND ------------> Directory $mountpoint2 DOES NOT EXIST on Server $g"$'\e[0m'
              echo $'\e[1;31m'"*********************************************************************************************************"$'\e[0m'
              echo
          else
              echo $'\e[1;32m'"Directory $mountpoint2 present at $g ... Proceeding"$'\e[0m'
              echo
          fi

    elif [[ $status1 == "Permission denied"* ]] ; then
       echo $'\e[1;32m'"Establishing Connection to $g"$'\e[0m'
       echo $'\e[1;31m'"*************************************************************************************************************************"$'\e[0m'
       echo $'\e[1;31m'ERROR ---------> Permission Denied...Please check the ssh configuration of the Target Server $g$'\e[0m'
       echo
       echo $'\e[1;31m'"Cannot determine if $mountpoint2 is present on Source $g. Fix connectivity issue and run again "$'\e[0m'
       echo $'\e[1;31m'"*************************************************************************************************************************"$'\e[0m'
    else
       echo $'\e[1;31m'"*************************************************************************************************************************"$'\e[0m'
       echo $'\e[1;31m'ERROR ----------> Incorrect Authentication..Please check the IP Address and Key provided in the path to the Target Server $g.$'\e[0m'
       echo
       echo $'\e[1;31m'"Cannot determine if $mountpoint2 is present on Source $g . Fix connectivity issue and run again "$'\e[0m'
       echo $'\e[1;31m'"*************************************************************************************************************************"$'\e[0m'
    fi >>final1.log
    sleep 1
   done
   cat final1.log

   final1=`cat /home/opc/final1.log`
   if [[ "${final1}" == *"DOES NOT EXIST"* ]]; then
              echo $'\e[1;31m'____________________________________________________________________________________________$'\e[0m'
              echo
              echo $'\e[1;31m'"One or more Errors have been found and highlighted above...Please fix and rerun...EXITING"$'\e[0m'
              echo $'\e[1;31m'____________________________________________________________________________________________$'\e[0m'
              LogMsg $LOGFILE "`cat final1.log`"
              LogMsg $LOGFILE "One or more Errors have been found and highlighted above...Please fix and rerun...EXITING"$'\e[0m'
              echo
              exit 1
   else
              echo $'\e[1;32m'_________________________________________________________$'\e[0m'
              echo
              echo $'\e[1;32m'"No Errors found with Target Connectivity... Proceeding"$'\e[0m'
              echo $'\e[1;32m'_________________________________________________________$'\e[0m'
              LogMsg $LOGFILE "`cat final1.log`"
              LogMsg $LOGFILE "No Errors found with Target Connectivity... Proceeding"
              echo
   fi

}

tar1(){
cd /home/opc
x=(`cat parsed_file.csv | cut -d"," -f2`)
x1=${#x[@]}
y=(`cat parsed_file.csv | cut -d"," -f4- | sed -e "s/,/-/g"`)
y1=${#y[@]}
z=(`cat /home/opc/parsed_file.csv | cut -d"," -f2-3 | sed -e "s/ /-/g" | sed -e "s/,/-/g"`)
z1=${#z[@]}
for ((i=0,j=0,k=0 ; i<${x1},j<${y1},k<${z1} ; i++,j++,k++));
    do
       echo $'\e[1;36m'Starting TAR Process...$'\e[0m'
       echo
       sleep 2
       test=$(echo "${y[$i]}" | sed -e "s/-/ /g")
       echo $'\e[1;36m'Current Directories being Archived and Compressed are : $test$'\e[0m'
       echo
       LogMsg $LOGFILE "-----------------Connecting to Source ${x[$i]} --------------"
       tar11=$(ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@${x[$i]} "cd $mpoint2;
       sudo tar -cvpPf ${z[$i]}.tar.gz --totals $test && echo; bash")
       echo
       LogMsg $LOGFILE "'$tar11'"
       LogMsg $LOGFILE "----------------- TAR PROCESS COMPLETE FOR $test --------------"
       echo $'\e[1;32m'"TAR Process complete for $test"$'\e[0m'
       echo
    done 1> tar.log 2> tar_error.log
    sleep 1
    if [[ -s tar_error.log ]];
        then
          if [[ `cat tar_error.log` == *"Exiting with failure status"* ]];
               then
                   echo $'\e[1;31m'"TAR Process FAILED...Exiting"$'\e[0m'
                   cat tar_error.log
                   exit 1
               else
                    cat tar.log
                    echo
          fi
 else
     echo $'\e[1;32m'"TAR Process Completed"$'\e[0m'
     cat tar.log
     echo
fi

}

upload2obj(){
for file in `ls $mpoint2`;
  do
      LogMsg $LOGFILE "Starting Upload of File $file to the OCS_MIgrations Bucket on OCI Object Storage"
      echo $'\e[1;36m'"Starting Upload of File $file"$'\e[0m'
      oci os object put -bn OCS_Migrations --file $mpoint2/$file &
      echo
  done 1> upload2obj.log 2> upload2obj_error.log
  wait
  if [[ -s upload2obj_error.log ]];
        then
          if [[ `cat upload2obj_error.log` == *"Error"* ]];
               then
                   echo $'\e[1;31m'"OCI Command failed...Exiting"$'\e[0m'
                   cat upload2obj_error.log
                   exit 1
          else
                  cat upload2obj.log
                  echo
                  echo $'\e[1;32m'"All Files uploaded to Object Storage"$'\e[0m'
                  echo
          fi
     fi
}

downloadfromobjstorage(){
cd /home/opc
        echo $'\e[1;36m'"Connecting to Target $oci_target to Download from Object Storage"$'\e[0m'
        echo
        LogMsg $LOGFILE "----------------- Connecting to $oci_target and downloading files--------------"
        ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@$oci_target "
            oci os object bulk-download -bn OCS_Migrations --download-dir $mountpoint2 " 1> download.log 2> download_error.log
        sleep 1

if [[ -s download_error.log ]];
        then
          if [[ `cat download_error.log` == *"Error"* ]];
               then
                   echo $'\e[1;31m'"OCI Command failed...Exiting"$'\e[0m'
                   cat download_error.log
                   exit 1
          else
                  cat download_error.log
                  cat download.log
                  echo $'\e[1;32m'" All Files Downloaded from Object Storage"$'\e[0m'
          fi
     fi
}


untar(){
cd /home/opc
a=(`cat parsed_file.csv | cut -d"," -f1`)
a1=${#a[@]}
b=(`cat /home/opc/parsed_file.csv | cut -d"," -f2-3 | sed -e "s/ /-/g" | sed -e "s/,/-/g"`)
b1=${#b[@]}
for ((u=0,v=0 ; u<${a1},v<${b1} ; u++,v++));
    do
       echo
       echo $'\e[1;36m'"Connecting to Target ${a[$u]}"$'\e[0m'
       echo
       sleep 2
       echo  $'\e[1;36m'"Downloading ${b[$u]}.tar.gz from Object Storage to Local Storage"$'\e[0m'
       sleep 1
       LogMsg $LOGFILE "CONNECTING TO TARGET ${a[$u]}"
       echo
       LogMsg $LOGFILE "DOWNLOADING ${b[$u]}.tar.gz FROM OBJECT STORAGE"
       ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@${a[$u]} "
           cd $mountpoint2
           sudo tar -xvpPf ${b[$u]}.tar.gz "
       LogMsg $LOGFILE "UNTAR PROCESS COMPLETE FOR $test"
       echo
       echo $'\e[1;32m'"UNTAR PROCESS COMPLETE FOR $test"$'\e[0m'
       echo
   done 1> untar.log 2> untar_error.log
    sleep 1
    if [[ -s untar_error.log ]];
        then
          if [[ `cat untar_error.log` == *"Exiting with failure status"* ]];
               then
                   echo
                   echo $'\e[1;31m'"TAR Command failed...Exiting"$'\e[0m'
                   cat untar_error.log
                   exit 1
         fi
 else
     cat untar.log
     echo $'\e[1;32m'"Untar Process completed successfully..."$'\e[0m'
 fi
}

LOGFILE=/var/log/psft-$HOSTNAME.log
CreateLog ${LOGFILE}
echo "' '" > /var/log/psft-$HOSTNAME.log
input_csv
rm -rf untar.log untar_error.log download.log download_error.log upload2obj.log upload2obj_error.log tar.log tar_error.log final1.log final.log source_servers.log target_servers.log

read_values(){
read -p 'Enter Mount Point Directory Path for Source Servers: ' mpoint
echo
mpoint1=$mpoint
mpoint2=${mpoint1%/}

read -p 'Enter Mount Point Directory Path for Target Servers: ' mountpoint
echo
mountpoint1=$mountpoint
mountpoint2=${mountpoint1%/}

read -p 'Enter IP Address of Target Server which has OCI CLI installed on it : ' oci_target
echo
}

read_values
sleep 1

soarvm_directory
sleep 1
echo

source_connectivity
sleep 1
echo

target_connectivity
sleep 1

tar1
upload2obj
downloadfromobjstorage
untar
echo
echo $'\e[1;32m'"**********************************"$'\e[0m'
echo $'\e[1;32m'PROCESS SUCCESSFULLY COMPLETED$'\e[0m'
echo $'\e[1;32m'"***********************************"$'\e[0m'
rm -rf untar.log untar_error.log download.log download_error.log upload2obj.log upload2obj_error.log tar.log tar_error.log final1.log final.log source_servers.log target_servers.log parsed.csv
echo
