#!/bin/bash
# ***********************************
# Created by Ninad Adhav            *
# Email ninad.adhav@oracle.com      *
# ***********************************

LogMsg(){
        local log=$1
        local msg=$2
        local pid=$$
        local now=$(date +'%s')
        local stamp=$(date --date "@${now}" +'%Y/%m/%d %H:%M:%S')
        echo "${stamp}-${pid}-${msg}" >>$log
}

CreateLog(){
        file=$1
        [ ! -e ${file} ] && touch $file
        sudo chmod a+rw $file
        sudo chown opc:opc $file
}


input_csv(){
echo Enter the path to the Input CSV File...
read -p 'Input Path to the file and press Enter : ' inputpath
if [[ -f $inputpath ]]
   then
       LogMsg $LOGFILE " $inputpath File found...proceeding to Tar Process"
   else
       echo CSV File does not exist at $inputpath ....Exiting !!!
       LogMsg $LOGFILE "CSV File does not exist at $inputpath ....Exiting !!!"
       echo
       exit 1
fi
sed -n '2,$p' <$inputpath > parsed_file.csv
LogMsg $LOGFILE "Installing Dos2unix Package for File conversion"
in=$(sudo yum install -q -y dos2unix && dos2unix -q parsed_file.csv)
LogMsg $LOGFILE "$in"
echo
}

soarvm_directory(){
if [[ -d $mpoint2 ]];
  then
     LogMsg $LOGFILE "Directory $mpoint2 found on SOAR VM...proceeding"
  else
     echo "****************************************************************"
     echo "* SOURCE NAS DIRECTORY DOES NOT EXIST ON SOAR VM...EXITING !!  *"
     echo "****************************************************************"
     LogMsg $LOGFILE "NAS DIRECTORY $mpoint2 DOES NOT EXIST on SOAR VM...EXITING !!"
     exit 1
fi
}

source_connectivity(){
echo "Checking Source Servers Connectivity..."
echo
for f in $(cat parsed_file.csv | cut -d"," -f2);
  do
    status=$(ssh -q -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=5 -i /home/opc/keys/ocs_key opc@$f echo ok 2>&1)
    if [[ $status == ok ]] ; then
          echo Connectivity Established to $f !!
          echo "Checking if $mpoint2 is present on $f"
          ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@$f "
          if [[ -d $mpoint2 ]]; then
              echo Directory is Present at $f
          else
              echo Directory $mpoint2 DOES NOT EXIST on Server $f Please Check and re-run the code!!!
          fi" 1>source_servers.log

          source_out=`cat /home/opc/source_servers.log`
          if [[ "${source_out}" == *"DOES NOT EXIST"* ]]; then
              echo "*********************************************************************************************************"
              echo "ERROR FOUND ------------> Directory $mpoint2 DOES NOT EXIST on Source Server $f"
              echo "*********************************************************************************************************"
              echo
          else
              echo "Directory $mpoint2 present"
              echo
          fi

    elif [[ $status == "Permission denied"* ]] ; then
       echo "Establishing Connection to $f"
       echo "*************************************************************************************************************************"
       echo ERROR --------> Permission Denied...Please check the ssh configuration of the Source Server $f
       echo
       echo "Cannot determine if $mpoint2 is present on Source $f. Fix connectivity issue and run again "
       echo "*************************************************************************************************************************"
    else
       echo "Establishing Connection to $f"
       echo "*********************************************************************************************************************************************"
       echo ERROR --------> Incorrect Authentication..Please check the IP Address and Key provided in the path to the Source Server $f.
       echo
       echo "Cannot determine if $mpoint2 is present on Source $f . Fix connectivity issue and run again "
       echo "*********************************************************************************************************************************************"
    fi >>final.log
    sleep 1
   done
   cat final.log
   final=`cat /home/opc/final.log`
   if [[ "${final}" == *"DOES NOT EXIST"* ]]; then
              echo ____________________________________________________________________________________________
              echo
              echo "One or more Errors have been found and highlighted above...Please fix and rerun...EXITING"
              echo ____________________________________________________________________________________________
              echo
              LogMsg $LOGFILE "`cat final.log`"
              LogMsg $LOGFILE "One or more Errors have been found and highlighted above...Please fix and rerun...EXITING"
              exit 1
   else
              echo _________________________________________________________
              echo
              echo "NO ERRORS FOUND.........PROCEEDING"
              echo _________________________________________________________
              LogMsg $LOGFILE "`cat final.log`"
              LogMsg $LOGFILE "NO ERRORS FOUND.........PROCEEDING"
   fi

}

target_connectivity(){
echo "Checking Target Server Connectivity..."
echo
for g in $(cat parsed_file.csv | cut -d"," -f1);
  do
    status1=$(ssh -q -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=5 -i /home/opc/keys/ocs_key opc@$g echo ok 2>&1)
    if [[ $status1 == ok ]] ; then
          echo Connectivity Established to $g !!
          echo "Checking if $mountpoint2 is present on $g"
          ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@$g "
          if [[ -d $mountpoint2 ]]; then
              echo Directory is Present at $g
          else
              echo Directory $mountpoint2 DOES NOT EXIST on Server $g Please Check and re-run the code!!!
          fi" 1>target_servers.log

          target_out=`cat /home/opc/target_servers.log`
          if [[ "${target_out}" == *"DOES NOT EXIST"* ]]; then
              echo "*********************************************************************************************************"
              echo "ERROR FOUND ------------> Directory $mountpoint2 DOES NOT EXIST on Server $g"
              echo "*********************************************************************************************************"
              echo
          else
              echo "Directory $mountpoint2 present"
              echo
          fi

    elif [[ $status1 == "Permission denied"* ]] ; then
       echo "Establishing Connection to $g"
       echo "*************************************************************************************************************************"
       echo ERROR ---------> Permission Denied...Please check the ssh configuration of the Target Server $g
       echo
       echo "Cannot determine if $mountpoint2 is present on Source $g. Fix connectivity issue and run again "
       echo "*************************************************************************************************************************"
    else
       echo "*************************************************************************************************************************"
       echo ERROR ----------> Incorrect Authentication..Please check the IP Address and Key provided in the path to the Target Server $g.
       echo 
       echo "Cannot determine if $mountpoint2 is present on Source $g . Fix connectivity issue and run again "
       echo "*************************************************************************************************************************"
    fi >>final1.log
    sleep 1
   done
   cat final1.log
   
   final1=`cat /home/opc/final1.log`
   if [[ "${final1}" == *"DOES NOT EXIST"* ]]; then
              echo ____________________________________________________________________________________________
              echo
              echo "One or more Errors have been found and highlighted above...Please fix and rerun...EXITING"
              echo ____________________________________________________________________________________________
              LogMsg $LOGFILE "`cat final1.log`"
              LogMsg $LOGFILE "One or more Errors have been found and highlighted above...Please fix and rerun...EXITING"
              echo
              exit 1
   else
              echo _________________________________________________________
              echo
              echo "NO ERRORS FOUND.........PROCEEDING"
              echo _________________________________________________________
              echo LogMsg $LOGFILE "`cat final1.log`"
              LogMsg $LOGFILE "NO ERRORS FOUND.........PROCEEDING"
   fi

}

tar1(){
cd /home/opc
x=(`cat parsed_file.csv | cut -d"," -f2`)
x1=${#x[@]}
y=(`cat parsed_file.csv | cut -d"," -f4- | sed -e "s/,/-/g"`)
y1=${#y[@]}
z=(`cat /home/opc/parsed_file.csv | cut -d"," -f2-3 | sed -e "s/ /-/g" | sed -e "s/,/-/g"`)
z1=${#z[@]}
for ((i=0,j=0,k=0 ; i<${x1},j<${y1},k<${z1} ; i++,j++,k++));
    do
       test=$(echo "${y[$i]}" | sed -e "s/-/ /g")
       echo Current Directories being Archived and Compressed are : $test
       LogMsg $LOGFILE "-----------------Connecting to Source ${x[$i]} --------------"
       tar11=$(ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@${x[$i]} "cd $mpoint2;
       sudo tar -cvpPf ${z[$i]}.tar.gz --totals $test && echo; bash")
       echo
       LogMsg $LOGFILE "'$tar11'"
       LogMsg $LOGFILE "----------------- TAR PROCESS COMPLETE FOR $test --------------"
       echo "Tar Process Complete for $test"
       echo
    done 2> error.log
    sleep 1
    LogMsg $LOGFILE "`cat error.log`"
    echo "'$tar11'"
    echo
    if [ -n `cat error.log` ];
    then
        echo `cat error.log`
        echo "Tar Process failed...Exiting"
        exit 1
    else
         break
    fi
}

upload2obj(){
cd $mpoint2
for file in `ls $mpoint2`;
  do
      LogMsg $LOGFILE "Starting Upload of File $file to the OCS_MIgrations Bucket on OCI Object Storage"
      echo "Starting Upload of File $file"
      oci os object put -bn OCS_Migrations --file $file &
      echo
  done 1> upload.log 2> error.log
  wait
  if [[ -s error.log ]];
        then
          if [[ `cat error.log` == *"Error"* ]];
               then
                   echo "OCI Command failed...Exiting"
                   cat error.log
                   exit 1
          else
                  echo "Unknown Error...Exiting"
                  exit 1
          fi
     else
         echo "SUCCESSFULLY UPLOADED TO OBJECT STORAGE"
         echo
         cat upload.log
     fi
}

downloadfromobjstorage(){
cd /home/opc
        echo "CONNECTING TO TARGET $oci_target"
        echo
        echo " DOWNLOADING FILES FROM OBJECT STORAGE"
        LogMsg $LOGFILE "----------------- CONNECTING TO TARGET $ipaddress --------------"
        LogMsg $LOGFILE "----------------- DOWNLOADING FILES FROM OBJECT STORAGE --------------"
        ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@$oci_target "
            oci os object bulk-download -bn OCS_Migrations --download-dir $mountpoint2 " 1> download.log 2> error.log
        LogMsg $LOGFILE "----------------- DOWNLOAD PROCESS COMPLETE --------------"
        echo "--------------DOWNLOAD PROCESS COMPLETE --------------"
        sleep 1
}

untar(){
cd /home/opc
a=(`cat parsed_file.csv | cut -d"," -f1`)
a1=${#a[@]}
b=(`cat /home/opc/parsed_file.csv | cut -d"," -f2-3 | sed -e "s/ /-/g" | sed -e "s/,/-/g"`)
b1=${#b[@]}
for ((u=0,v=0 ; u<${a1},v<${b1} ; u++,v++));
    do
       echo "----------------- CONNECTING TO TARGET ${a[$u]} --------------"
       echo
       sleep 1
       echo  "DOWNLOADING ${b[$u]} FROM OBJECT STORAGE"
       sleep 1
       LogMsg $LOGFILE "----------------- CONNECTING TO TARGET ${a[$u]} --------------"
       LogMsg $LOGFILE "----------------- DOWNLOADING ${b[$u]} FROM OBJECT STORAGE --------------"
       untar11=$(ssh -n -q -o StrictHostKeyChecking=no -i /home/opc/keys/ocs_key opc@${a[$u]} "
           cd $mountpoint2
           sudo tar -xpPf ${b[$u]}.tar.gz ")
       LogMsg $LOGFILE "'$untar11'"
       LogMsg $LOGFILE "----------------- UNTAR PROCESS COMPLETE FOR $test --------------"
       echo ${"untar11"}
       echo
       echo "UNTAR PROCESS COMPLETE FOR $test"
   done
}

LOGFILE=/var/log/psft-$HOSTNAME.log
CreateLog ${LOGFILE}
echo "' '" > /var/log/psft-$HOSTNAME.log
input_csv
rm -rf /home/opc/source_servers.log /home/opc/target_servers.log /home/opc/final.log /home/opc/final1.log

read_values(){
read -p 'Enter Mount Point Directory Path for Source Servers: ' mpoint
echo
mpoint1=$mpoint
mpoint2=${mpoint1%/}

read -p 'Enter Mount Point Directory Path for Target Servers: ' mountpoint
echo
mountpoint1=$mountpoint
mountpoint2=${mountpoint1%/}

read -p 'Enter IP Address of Target Server which has OCI CLI installed in it : ' oci_target
echo
}

read_values
sleep 1

soarvm_directory
sleep 1
echo

source_connectivity
sleep 1
echo

target_connectivity
sleep 1

tar1
upload2obj
downloadfromobjstorage
untar
echo
echo "**********************************"
echo PROCESS SUCCESSFULLY COMPLETED
echo "***********************************"
rm -rf final1.log final.log source_servers.log target_servers.log
echo
